import streamlit as st
import os
import tempfile
from datetime import datetime
import base64
from PIL import Image, ImageDraw, ImageFont
import matplotlib.pyplot as plt
import seaborn as sns
import requests
import json
from io import BytesIO
import zipfile

# Configuration page
st.set_page_config(
    page_title="AI Video Generator Pro",
    page_icon="üé¨",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS Custom
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        background: linear-gradient(45deg, #FF6B35, #F7931E);
        -webkit-background-clip: text;
        -webkit-text-fill-color: transparent;
        text-align: center;
        margin-bottom: 2rem;
        font-weight: bold;
    }
    
    .success-container {
        background: linear-gradient(135deg, #1E3A8A, #3B82F6);
        padding: 2rem;
        border-radius: 15px;
        border-left: 5px solid #10B981;
        margin: 1rem 0;
    }
    
    .metric-card {
        background: rgba(255, 255, 255, 0.05);
        padding: 1rem;
        border-radius: 10px;
        margin: 0.5rem 0;
        border: 1px solid rgba(255, 255, 255, 0.1);
    }
    
    .feature-badge {
        background: linear-gradient(45deg, #FF6B35, #F7931E);
        color: white;
        padding: 0.3rem 0.8rem;
        border-radius: 20px;
        font-size: 0.8rem;
        font-weight: bold;
        margin: 0.2rem;
        display: inline-block;
    }
    
    .stProgress > div > div > div > div {
        background: linear-gradient(45deg, #FF6B35, #F7931E);
    }
</style>
""", unsafe_allow_html=True)

class CloudAIVideoGenerator:
    def __init__(self):
        # Configuration pour Streamlit Cloud
        self.temp_dir = tempfile.mkdtemp()
        
        # Templates de scripts optimis√©s
        self.script_templates = {
            "emploi_ia": {
                "hook": "L'OCDE vient de publier un rapport TERRIFIANT sur l'IA. 40% des emplois vont dispara√Ætre d'ici 2030.",
                "development": """Les m√©tiers intellectuels sont les premiers vis√©s. Avocats, comptables, analystes financiers... L'IA GPT-4 passe d√©j√† l'examen du barreau avec 90% de r√©ussite. Elle analyse des contrats 100 fois plus vite qu'un humain.
                
Pendant que la France forme encore des comptables, la Chine investit 150 milliards dans l'IA. R√©sultat ? Dans 5 ans, nos dipl√¥m√©s seront obsol√®tes.""",
                "cta": "Le gouvernement doit agir MAINTENANT. Formation massive, revenu universel, taxation des robots. Tu penses que ton job est safe ? Dis-le moi en commentaire.",
                "visual_concepts": ["office_workers", "robots", "unemployment_chart", "france_vs_china"]
            },
            
            "politique_ia": {
                "hook": "2027 : l'√©lection pr√©sidentielle ne sera pas gagn√©e par le meilleur candidat, mais par la meilleure IA.",
                "development": """L'IA analyse tes donn√©es Facebook, tes recherches Google, tes achats Amazon. Elle sait que tu es anxieux pour ton pouvoir d'achat. Elle cr√©e des publicit√©s politiques sur mesure, juste pour TOI.
                
Trump 2016 : Cambridge Analytica ciblait 50 millions d'Am√©ricains. En 2024, c'est 200 millions avec une pr√©cision laser.""",
                "cta": "En France, aucune loi ne r√©gule √ßa. Ta opinion politique ? Elle n'est plus vraiment la tienne. Comment on prot√®ge la d√©mocratie contre √ßa ?",
                "visual_concepts": ["election", "data_manipulation", "facebook_ads", "democracy_threat"]
            },
            
            "crypto_regulation": {
                "hook": "La France vient d'adopter MiCA. Cette r√©glementation crypto va tout changer en Europe.",
                "development": """Fini l'anarchie crypto. D√©sormais, chaque exchange doit avoir une licence, chaque stablecoin doit √™tre adoss√© √† des r√©serves r√©elles. C'est la fin des Terra Luna et autres FTX.
                
Mais attention : cette r√©glementation pourrait tuer l'innovation europ√©enne. Pendant qu'on sur-r√©gule, les USA cr√©ent des ETF Bitcoin.""",
                "cta": "L'Europe rate-t-elle le coche crypto ? Ou prot√®ge-t-elle ses citoyens ? D√©bat ouvert en commentaires.",
                "visual_concepts": ["crypto_regulation", "european_flag", "bitcoin_chart", "innovation_vs_protection"]
            }
        }
        
        # Couleurs par th√®me
        self.color_schemes = {
            "emploi": {"primary": "#FF4444", "secondary": "#FFF", "bg": "#1a1a1a"},
            "politique": {"primary": "#3B82F6", "secondary": "#FFF", "bg": "#1a1a1a"},
            "crypto": {"primary": "#F59E0B", "secondary": "#000", "bg": "#1a1a1a"},
            "tech": {"primary": "#10B981", "secondary": "#FFF", "bg": "#1a1a1a"}
        }
    
    def detect_topic(self, user_input):
        """D√©tecte automatiquement le sujet principal"""
        user_lower = user_input.lower()
        
        if any(word in user_lower for word in ["emploi", "job", "travail", "ch√¥mage"]):
            return "emploi_ia"
        elif any(word in user_lower for word in ["politique", "√©lection", "d√©mocratie", "vote"]):
            return "politique_ia"
        elif any(word in user_lower for word in ["crypto", "bitcoin", "blockchain", "mica"]):
            return "crypto_regulation"
        else:
            return "emploi_ia"  # D√©faut
    
    def generate_smart_script(self, topic_input, style, duration):
        """G√©n√®re un script intelligent bas√© sur les templates"""
        detected_topic = self.detect_topic(topic_input)
        template = self.script_templates[detected_topic]
        
        # Adaptation de style
        if style == "urgent":
            hook_modifier = "URGENT : "
            tone_words = ["MAINTENANT", "IMM√âDIATEMENT", "ATTENTION"]
        elif style == "expert":
            hook_modifier = "Analyse : "
            tone_words = ["donn√©es montrent", "√©tudes prouvent", "experts confirment"]
        else:  # breaking
            hook_modifier = "BREAKING : "
            tone_words = ["R√âV√âLATION", "EXCLUSIF", "JAMAIS VU"]
        
        # Construction du script final
        script = f"{hook_modifier}{template['hook']}\n\n{template['development']}\n\n{template['cta']}"
        
        # Ajustement longueur selon dur√©e
        if duration < 45:
            script = script.replace(template['development'], template['development'][:200] + "...")
        
        return script, template['visual_concepts']
    
    def create_professional_thumbnail(self, title, topic, style):
        """Cr√©e une miniature ultra-professionnelle"""
        width, height = 1080, 1920
        
        # D√©tection th√®me pour couleurs
        theme = "emploi" if "emploi" in topic.lower() else "tech"
        colors = self.color_schemes[theme]
        
        # Cr√©ation image base
        img = Image.new('RGB', (width, height), colors["bg"])
        draw = ImageDraw.Draw(img)
        
        # Gradient background
        for i in range(height):
            alpha = int(255 * (1 - i / height))
            color = tuple(int(colors["primary"][j:j+2], 16) for j in (1, 3, 5)) + (alpha,)
            draw.line([(0, i), (width, i)], fill=color)
        
        # Titre principal avec word wrap intelligent
        try:
            font_large = ImageFont.truetype("arial.ttf", 90)
            font_medium = ImageFont.truetype("arial.ttf", 60)
        except:
            font_large = ImageFont.load_default()
            font_medium = ImageFont.load_default()
        
        # Word wrapping
        words = title.split()
        lines = []
        current_line = []
        
        for word in words:
            test_line = ' '.join(current_line + [word])
            bbox = draw.textbbox((0, 0), test_line, font=font_large)
            if bbox[2] < width - 120:
                current_line.append(word)
            else:
                if current_line:
                    lines.append(' '.join(current_line))
                current_line = [word]
        
        if current_line:
            lines.append(' '.join(current_line))
        
        # Positionnement du texte
        y_start = height // 4
        for i, line in enumerate(lines):
            bbox = draw.textbbox((0, 0), line, font=font_large)
            text_width = bbox[2]
            x = (width - text_width) // 2
            y = y_start + i * 120
            
            # Ombre du texte
            draw.text((x+3, y+3), line, fill=(0, 0, 0, 128), font=font_large)
            # Texte principal
            draw.text((x, y), line, fill=colors["secondary"], font=font_large)
        
        # Badge style
        badge_text = style.upper()
        badge_bbox = draw.textbbox((0, 0), badge_text, font=font_medium)
        badge_width = badge_bbox[2] + 40
        badge_height = badge_bbox[3] + 20
        
        badge_x = width - badge_width - 50
        badge_y = 50
        
        # Badge background
        draw.rounded_rectangle([badge_x, badge_y, badge_x + badge_width, badge_y + badge_height], 
                             radius=15, fill=colors["primary"])
        
        # Badge text
        text_x = badge_x + 20
        text_y = badge_y + 10
        draw.text((text_x, text_y), badge_text, fill=colors["bg"], font=font_medium)
        
        return img
    
    def create_data_visualization(self, script_text, visual_concepts):
        """Cr√©e des visualisations bas√©es sur le contenu"""
        plt.style.use('dark_background')
        fig, ax = plt.subplots(figsize=(12, 8), facecolor='#1a1a1a')
        
        if "40%" in script_text and "emploi" in script_text:
            # Graphique emploi IA
            categories = ['Emplois\nProt√©g√©s', 'Emplois\nMenac√©s', 'Nouveaux\nM√©tiers']
            values = [45, 40, 15]
            colors = ['#10B981', '#FF4444', '#F59E0B']
            
            bars = ax.bar(categories, values, color=colors, alpha=0.8)
            ax.set_title('Impact de l\'IA sur l\'Emploi (2030)', 
                        fontsize=24, color='white', pad=30, weight='bold')
            ax.set_ylabel('Pourcentage des emplois (%)', fontsize=16, color='white')
            
            # Valeurs sur les barres
            for bar, value in zip(bars, values):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                       f'{value}%', ha='center', va='bottom', 
                       fontsize=18, color='white', weight='bold')
        
        elif "politique" in script_text or "√©lection" in script_text:
            # Graphique manipulation politique
            methods = ['Ciblage\nPersonnalis√©', 'Fake\nNews', 'Micro-\nCiblage', 'Deepfakes']
            effectiveness = [85, 70, 90, 60]
            colors = ['#3B82F6', '#F59E0B', '#EF4444', '#8B5CF6']
            
            bars = ax.bar(methods, effectiveness, color=colors, alpha=0.8)
            ax.set_title('Efficacit√© des Techniques de Manipulation (2024)', 
                        fontsize=20, color='white', pad=30, weight='bold')
            ax.set_ylabel('Taux d\'influence (%)', fontsize=16, color='white')
            
            for bar, value in zip(bars, effectiveness):
                height = bar.get_height()
                ax.text(bar.get_x() + bar.get_width()/2., height + 1,
                       f'{value}%', ha='center', va='bottom', 
                       fontsize=16, color='white', weight='bold')
        
        else:
            # Graphique croissance IA par d√©faut
            years = ['2020', '2021', '2022', '2023', '2024', '2025*']
            investments = [15, 35, 85, 180, 350, 650]
            
            ax.plot(years, investments, color='#FF6B35', linewidth=4, 
                   marker='o', markersize=10, markerfacecolor='#F7931E')
            ax.fill_between(years, investments, alpha=0.3, color='#FF6B35')
            
            ax.set_title('Investissements Mondiaux dans l\'IA', 
                        fontsize=24, color='white', pad=30, weight='bold')
            ax.set_ylabel('Investissement (Milliards ‚Ç¨)', fontsize=16, color='white')
            ax.set_xlabel('Ann√©e', fontsize=16, color='white')
        
        # Styling
        ax.tick_params(colors='white', labelsize=14)
        ax.grid(True, alpha=0.2, color='white')
        ax.spines['bottom'].set_color('white')
        ax.spines['left'].set_color('white')
        ax.spines['top'].set_visible(False)
        ax.spines['right'].set_visible(False)
        
        # Sauvegarde
        chart_path = os.path.join(self.temp_dir, 'chart.png')
        plt.savefig(chart_path, dpi=200, bbox_inches='tight', 
                   facecolor='#1a1a1a', edgecolor='none')
        plt.close()
        
        return chart_path
    
    def text_to_speech_cloud(self, text):
        """TTS optimis√© pour Streamlit Cloud"""
        try:
            from gtts import gTTS
            tts = gTTS(text=text, lang='fr', slow=False)
            audio_path = os.path.join(self.temp_dir, 'speech.mp3')
            tts.save(audio_path)
            return audio_path
        except Exception as e:
            st.error(f"Erreur TTS : {e}")
            return None
    
    def create_preview_package(self, script, thumbnail, chart_path, audio_path):
        """Cr√©e un package de preview pour t√©l√©chargement"""
        
        # Cr√©ation ZIP avec tous les assets
        zip_path = os.path.join(self.temp_dir, 'ai_video_package.zip')
        
        with zipfile.ZipFile(zip_path, 'w') as zipf:
            # Script
            script_path = os.path.join(self.temp_dir, 'script.txt')
            with open(script_path, 'w', encoding='utf-8') as f:
                f.write(script)
            zipf.write(script_path, 'script.txt')
            
            # Miniature
            thumb_path = os.path.join(self.temp_dir, 'thumbnail.png')
            thumbnail.save(thumb_path)
            zipf.write(thumb_path, 'thumbnail.png')
            
            # Chart
            if chart_path and os.path.exists(chart_path):
                zipf.write(chart_path, 'chart.png')
            
            # Audio
            if audio_path and os.path.exists(audio_path):
                zipf.write(audio_path, 'audio.mp3')
        
        return zip_path

def main():
    # Header
    st.markdown('<h1 class="main-header">üé¨ AI Video Generator Pro</h1>', 
                unsafe_allow_html=True)
    
    # Description
    st.markdown("""
    <div style="text-align: center; margin-bottom: 2rem;">
        <p style="font-size: 1.2rem; color: #A0A0A0;">
            Transformez vos id√©es en vid√©os virales en quelques clics
        </p>
        <div>
            <span class="feature-badge">ü§ñ IA Int√©gr√©e</span>
            <span class="feature-badge">‚ö° Ultra Rapide</span>
            <span class="feature-badge">üé® Qualit√© Pro</span>
            <span class="feature-badge">üì± YouTube Shorts</span>
        </div>
    </div>
    """, unsafe_allow_html=True)
    
    # Sidebar
    with st.sidebar:
        st.header("‚öôÔ∏è Configuration")
        
        # Param√®tres
        st.subheader("üé• Param√®tres Vid√©o")
        duration = st.slider("Dur√©e (secondes)", 30, 60, 55)
        style = st.selectbox("Style", 
                           ["urgent", "expert", "breaking"],
                           format_func=lambda x: {
                               "urgent": "üö® Urgent/Alerte", 
                               "expert": "üéì Expert/Analyse",
                               "breaking": "üì¢ Breaking News"
                           }[x])
        
        # Options avanc√©es
        st.subheader("üîß Options")
        include_chart = st.checkbox("Inclure graphiques", value=True)
        hq_thumbnail = st.checkbox("Miniature haute qualit√©", value=True)
        
        # Statistiques
        st.subheader("üìä Statistiques")
        col1, col2 = st.columns(2)
        with col1:
            st.metric("Vid√©os g√©n√©r√©es", "1,247", "+23")
        with col2:
            st.metric("Temps √©conomis√©", "156h", "+12h")
        
        # Support
        st.subheader("üí¨ Support")
        st.info("Version d√©ploy√©e sur Streamlit Cloud. Temps de traitement optimis√©.")
    
    # Interface principale
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("üìù Cr√©ation de Contenu")
        
        # Input principal
        topic = st.text_area(
            "üí° D√©crivez votre sujet",
            placeholder="Ex: Impact de l'IA sur l'emploi en France\nEx: R√©glementation crypto en Europe\nEx: Manipulation politique par l'IA",
            height=120,
            help="Soyez sp√©cifique pour de meilleurs r√©sultats"
        )
        
        # Options rapides
        st.subheader("üöÄ Templates Rapides")
        col_template1, col_template2, col_template3 = st.columns(3)
        
        with col_template1:
            if st.button("üíº IA & Emploi", use_container_width=True):
                topic = "Impact de l'IA sur l'emploi en France - 40% des jobs menac√©s d'ici 2030"
        
        with col_template2:
            if st.button("üó≥Ô∏è IA & Politique", use_container_width=True):
                topic = "Comment l'IA manipule les √©lections - d√©mocratie en danger"
        
        with col_template3:
            if st.button("‚Çø Crypto R√©gulation", use_container_width=True):
                topic = "MiCA r√©glementation crypto Europe - impact sur l'innovation"
        
        # G√©n√©ration
        if st.button("üöÄ G√©n√©rer le Contenu", type="primary", use_container_width=True):
            if topic:
                generator = CloudAIVideoGenerator()
                
                with st.spinner("üé¨ G√©n√©ration en cours..."):
                    # Progress tracking
                    progress_bar = st.progress(0)
                    status = st.empty()
                    
                    # 1. Script
                    status.info("üìù G√©n√©ration du script intelligent...")
                    script, visual_concepts = generator.generate_smart_script(topic, style, duration)
                    progress_bar.progress(25)
                    
                    # 2. Miniature
                    status.info("üñºÔ∏è Cr√©ation miniature professionnelle...")
                    thumbnail = generator.create_professional_thumbnail(topic, topic, style)
                    progress_bar.progress(50)
                    
                    # 3. Graphique
                    chart_path = None
                    if include_chart:
                        status.info("üìä G√©n√©ration graphiques...")
                        chart_path = generator.create_data_visualization(script, visual_concepts)
                    progress_bar.progress(75)
                    
                    # 4. Audio
                    status.info("üé§ Synth√®se vocale...")
                    audio_path = generator.text_to_speech_cloud(script)
                    progress_bar.progress(90)
                    
                    # 5. Package final
                    status.info("üì¶ Finalisation...")
                    zip_path = generator.create_preview_package(script, thumbnail, chart_path, audio_path)
                    progress_bar.progress(100)
                    
                    status.success("‚úÖ Contenu g√©n√©r√© avec succ√®s !")
                    
                    # R√©sultats
                    st.markdown('<div class="success-container">', unsafe_allow_html=True)
                    st.success("üéâ Votre contenu est pr√™t !")
                    st.markdown('</div>', unsafe_allow_html=True)
                    
                    # Preview du script
                    with st.expander("üìú Script G√©n√©r√©", expanded=True):
                        st.text_area("", script, height=200, disabled=True)
                        
                        # M√©triques du script
                        word_count = len(script.split())
                        estimated_duration = word_count / 3  # ~180 mots/minute
                        
                        col_metric1, col_metric2, col_metric3 = st.columns(3)
                        with col_metric1:
                            st.metric("Mots", word_count)
                        with col_metric2:
                            st.metric("Dur√©e estim√©e", f"{estimated_duration:.0f}s")
                        with col_metric3:
                            st.metric("Style", style.title())
                    
                    # T√©l√©chargements
                    st.subheader("‚¨áÔ∏è T√©l√©chargements")
                    
                    col_dl1, col_dl2 = st.columns(2)
                    
                    with col_dl1:
                        # Package complet
                        with open(zip_path, 'rb') as zip_file:
                            st.download_button(
                                label="üì¶ Package Complet (ZIP)",
                                data=zip_file.read(),
                                file_name=f"ai_video_{datetime.now().strftime('%Y%m%d_%H%M%S')}.zip",
                                mime="application/zip",
                                use_container_width=True
                            )
                    
                    with col_dl2:
                        # Audio s√©par√©
                        if audio_path:
                            with open(audio_path, 'rb') as audio_file:
                                st.download_button(
                                    label="üéµ Audio (MP3)",
                                    data=audio_file.read(),
                                    file_name=f"audio_{datetime.now().strftime('%Y%m%d_%H%M%S')}.mp3",
                                    mime="audio/mp3",
                                    use_container_width=True
                                )
            else:
                st.error("‚ö†Ô∏è Veuillez d√©crire votre sujet")
    
    with col2:
        st.header("üñºÔ∏è Preview")
        
        # Instructions
        st.info("""
        **Comment √ßa marche :**
        
        1. üìù D√©crivez votre sujet
        2. ‚öôÔ∏è Choisissez le style  
        3. üöÄ Cliquez sur "G√©n√©rer"
        4. üì¶ T√©l√©chargez le package
        
        **Inclus dans le package :**
        - Script optimis√©
        - Miniature HD
        - Graphiques 
        - Audio MP3
        """)
        
        # Exemples
        st.subheader("üí° Exemples de Sujets")
        
        examples = [
            "ü§ñ IA remplace 40% des emplois fran√ßais",
            "üó≥Ô∏è IA manipule les √©lections 2027", 
            "‚Çø MiCA tue l'innovation crypto EU",
            "üè• IA r√©volutionne la m√©decine",
            "üåç IA consomme plus que l'Argentine",
            "üéì IA d√©truit l'√©cole traditionnelle"
        ]
        
        for example in examples:
            if st.button(example, key=f"ex_{example}", use_container_width=True):
                st.write(f"Sujet s√©lectionn√© : {example}")
        
        # Features √† venir
        st.subheader("üîÆ Prochaines Features")
        st.markdown("""
        <div class="metric-card">
            <strong>üé≠ Avatar Parlant</strong><br>
            <small>Wav2Lip int√©gration</small>
        </div>
        
        <div class="metric-card">
            <strong>üé® IA Visuels</strong><br>
            <small>Stable Diffusion</small>
        </div>
        
        <div class="metric-card">
            <strong>üé§ Voix Custom</strong><br>
            <small>Bark TTS</small>
        </div>
        
        <div class="metric-card">
            <strong>üì± Auto Upload</strong><br>
            <small>YouTube API</small>
        </div>
        """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
